knitr::opts_chunk$set(echo = TRUE)
library(readxl)
data_train <- read_excel("Data/data_train.xlsx")
#install.packages(c("ggplot2", "sf", "dplyr"))
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
colnames(data_train)
points_sf <- st_as_sf(data_train, coords = c("longitud", "latitud"), crs = 4326)
points_sf <- points_sf[order(points_sf$precio.house.m2), ]
# Download the map of Madrid (use a simple shapefile, for example)
madrid_map <- st_read("Data/madrid.geojson")
# Plot the map with the points colored by the 'value' variable
ggplot() +
geom_sf(data = madrid_map, fill = "lightgray", color = "white") +  # Plot map
geom_sf(data = points_sf, aes(color = precio.house.m2), size = 1.5) +  # Plot points
scale_color_gradient(low = "#00C5CD", high = "red") +
labs(title = "Spatial situation and price",
x = "Longitude", y = "Latitude") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
### Done with teh help of ChatGPT
unique_counts <- data.frame(
Column = names(data_train),
Unique_Values = sapply(data_train, function(x) length(unique(x)))
)
unique_counts
plot_hist = function(data_train, type = "both", n, m) {
# Configure subplots
par(mfrow = c(n, m),mar = c(10, 4, 4, 1))
# Loop through columns
for (col in colnames(data_train)) {
# plot numeric columns
if (is.numeric(data_train[[col]]) && (type == "numeric" || type == "both")) {
# Create histograms
hist(data_train[[col]],
main = paste(col),
xlab = "",
col = "dodgerblue4")
# plot non-numeric columns
} else if (!is.numeric(data_train[[col]]) && (type == "categoric"
|| type == "both")) {
# Adjust x-axis label arrangement for specific cols
barplot(table(data_train[[col]]),
main = paste(col),
xlab = "",
col = "dodgerblue",
las = xlabel_arrangement)
}
}
# Reset the plotting layout
par(mfrow = c(1, 1))
}
# Plot non numeric features
plot_hist(data = data,type="numeric", n=3, m=2)
plot_hist = function(data_train, type = "both", n, m) {
# Configure subplots
par(mfrow = c(n, m),mar = c(10, 4, 4, 1))
# Loop through columns
for (col in colnames(data_train)) {
# plot numeric columns
if (is.numeric(data_train[[col]]) && (type == "numeric" || type == "both")) {
# Create histograms
hist(data_train[[col]],
main = paste(col),
xlab = "",
col = "dodgerblue4")
# plot non-numeric columns
} else if (!is.numeric(data_train[[col]]) && (type == "categoric"
|| type == "both")) {
# Adjust x-axis label arrangement for specific cols
barplot(table(data_train[[col]]),
main = paste(col),
xlab = "",
col = "dodgerblue",
las = xlabel_arrangement)
}
}
# Reset the plotting layout
par(mfrow = c(1, 1))
}
# Plot non numeric features
plot_hist(data = data,type="numeric", n=3, m=2)
plot_hist = function(data_train, type = "both", n, m) {
# Configure subplots
par(mfrow = c(n, m),mar = c(10, 4, 4, 1))
# Loop through columns
for (col in colnames(data_train)) {
# plot numeric columns
if (is.numeric(data_train[[col]]) && (type == "numeric" || type == "both")) {
# Create histograms
hist(data_train[[col]],
main = paste(col),
xlab = "",
col = "dodgerblue4")
# plot non-numeric columns
} else if (!is.numeric(data_train[[col]]) && (type == "categoric"
|| type == "both")) {
# Adjust x-axis label arrangement for specific cols
barplot(table(data_train[[col]]),
main = paste(col),
xlab = "",
col = "dodgerblue",
las = xlabel_arrangement)
}
}
# Reset the plotting layout
par(mfrow = c(1, 1))
}
# Plot non numeric features
plot_hist(data = data,type="numeric", n=3, m=2)
unique_counts <- data.frame(
Column = names(data_train),
Unique_Values = sapply(data_train, function(x) length(unique(x)))
)
unique_counts
unique_counts <- data.frame(
Column = names(data_train),
Unique_Values = sapply(data_train, function(x) length(unique(x)))
)
unique_counts
plot_hist = function(data_train, type = "both", n, m) {
# Configure subplots
par(mfrow = c(n, m),mar = c(10, 4, 4, 1))
# Loop through columns
for (col in colnames(data_train)) {
# plot numeric columns
if (is.numeric(data_train[[col]]) && (type == "numeric" || type == "both")) {
# Create histograms
hist(data_train[[col]],
main = paste(col),
xlab = "",
col = "dodgerblue4")
# plot non-numeric columns
} else if (!is.numeric(data_train[[col]]) && (type == "categoric"
|| type == "both")) {
# Adjust x-axis label arrangement for specific cols
barplot(table(data_train[[col]]),
main = paste(col),
xlab = "",
col = "dodgerblue",
las = xlabel_arrangement)
}
}
# Reset the plotting layout
par(mfrow = c(1, 1))
}
# Plot non numeric features
plot_hist(data = data,type="numeric", n=3, m=2)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
data_train <- read_excel("Data/data_train.xlsx")
#install.packages(c("ggplot2", "sf", "dplyr"))
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
colnames(data_train)
points_sf <- st_as_sf(data_train, coords = c("longitud", "latitud"), crs = 4326)
points_sf <- points_sf[order(points_sf$precio.house.m2), ]
# Download the map of Madrid (use a simple shapefile, for example)
madrid_map <- st_read("Data/madrid.geojson")
# Plot the map with the points colored by the 'value' variable
ggplot() +
geom_sf(data = madrid_map, fill = "lightgray", color = "white") +  # Plot map
geom_sf(data = points_sf, aes(color = precio.house.m2), size = 1.5) +  # Plot points
scale_color_gradient(low = "#00C5CD", high = "red") +
labs(title = "Spatial situation and price",
x = "Longitude", y = "Latitude") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
### Done with teh help of ChatGPT
unique_counts <- data.frame(
Column = names(data_train),
Unique_Values = sapply(data_train, function(x) length(unique(x)))
)
unique_counts
plot_hist = function(data_train, type = "both", n, m) {
# Configure subplots
par(mfrow = c(n, m),mar = c(10, 4, 4, 1))
# Loop through columns
for (col in colnames(data_train)) {
# plot numeric columns
if (is.numeric(data_train[[col]]) && (type == "numeric" || type == "both")) {
# Create histograms
hist(data_train[[col]],
main = paste(col),
xlab = "",
col = "dodgerblue4")
# plot non-numeric columns
} else if (!is.numeric(data_train[[col]]) && (type == "categoric"
|| type == "both")) {
# Adjust x-axis label arrangement for specific cols
barplot(table(data_train[[col]]),
main = paste(col),
xlab = "",
col = "dodgerblue",
las = xlabel_arrangement)
}
}
# Reset the plotting layout
par(mfrow = c(1, 1))
}
# Plot non numeric features
plot_hist(data = data,type="numeric", n=3, m=2)
