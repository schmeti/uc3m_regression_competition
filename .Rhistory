install.packages("GGally")
#install.packages(c("ggplot2", "sf", "dplyr"))
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
library(GGally)
#install.packages(c("ggplot2", "sf", "dplyr"))
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
library(GGally)
ggpairs(data_train)
sapply(data_train, class)
# turn identifiers into strings to prevent errors
data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona ", "numeric", "casco.historico", "M.30")] <- lapply(data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona", "numeric", "casco.historico", "M.30")], as.character)
sapply(data_train, class)
# turn identifiers into strings to prevent errors
data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona ", "casco.historico", "M.30")] <- lapply(data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona", "casco.historico", "M.30")], as.character)
sapply(data_train, class)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
data_train <- read_excel("Data/data_train.xlsx")
#install.packages(c("ggplot2", "sf", "dplyr"))
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
library(GGally)
colnames(data_train)
points_sf <- st_as_sf(data_train, coords = c("longitud", "latitud"), crs = 4326)
points_sf <- points_sf[order(points_sf$precio.house.m2), ]
# Download the map of Madrid (use a simple shapefile, for example)
madrid_map <- st_read("Data/madrid.geojson")
# Plot the map with the points colored by the 'value' variable
ggplot() +
geom_sf(data = madrid_map, fill = "lightgray", color = "white") +  # Plot map
geom_sf(data = points_sf, aes(color = precio.house.m2), size = 1.5) +  # Plot points
scale_color_gradient(low = "#00C5CD", high = "red") +
labs(title = "Spatial situation and price",
x = "Longitude", y = "Latitude") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
### Done with teh help of ChatGPT
# turn identifiers into strings to prevent errors
data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona ", "casco.historico", "M.30")] <- lapply(data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona", "casco.historico", "M.30")], as.character)
unique_counts <- data.frame(
Column = names(data_train),
Unique_Values = sapply(data_train, function(x) length(unique(x)))
)
unique_counts
plot_hist = function(data_train, type = "both", n, m) {
# Configure subplots
par(mfrow = c(n, m),mar = c(10, 4, 4, 1))
# Loop through columns
for (col in colnames(data_train)) {
# plot numeric columns
if (is.numeric(data_train[[col]]) && (type == "numeric" || type == "both")) {
# Create histograms
hist(data_train[[col]],
main = paste(col),
xlab = "",
col = "dodgerblue4")
# plot non-numeric columns
} else if (!is.numeric(data_train[[col]]) && (type == "categoric"
|| type == "both")) {
# Adjust x-axis label arrangement for specific cols
barplot(table(data_train[[col]]),
main = paste(col),
xlab = "",
col = "dodgerblue")
}
}
# Reset the plotting layout
par(mfrow = c(1, 1))
}
# Numeric hist
plot_hist(data = data_train ,type="numeric", n=3, m=2)
# Numeric hist
plot_hist(data = data_train ,type="categoric", n=3, m=2)
ggpairs(data_train)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
data_train <- read_excel("Data/data_train.xlsx")
#install.packages(c("ggplot2", "sf", "dplyr"))
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
library(GGally)
colnames(data_train)
points_sf <- st_as_sf(data_train, coords = c("longitud", "latitud"), crs = 4326)
points_sf <- points_sf[order(points_sf$precio.house.m2), ]
# Download the map of Madrid (use a simple shapefile, for example)
madrid_map <- st_read("Data/madrid.geojson")
# Plot the map with the points colored by the 'value' variable
ggplot() +
geom_sf(data = madrid_map, fill = "lightgray", color = "white") +  # Plot map
geom_sf(data = points_sf, aes(color = precio.house.m2), size = 1.5) +  # Plot points
scale_color_gradient(low = "#00C5CD", high = "red") +
labs(title = "Spatial situation and price",
x = "Longitude", y = "Latitude") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
### Done with teh help of ChatGPT
# turn identifiers into strings to prevent errors
data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona ", "casco.historico", "M.30","comercial")] <- lapply(data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona", "casco.historico", "M.30","comercial")], as.character)
unique_counts <- data.frame(
Column = names(data_train),
Unique_Values = sapply(data_train, function(x) length(unique(x)))
)
unique_counts
plot_hist = function(data_train, type = "both", n, m) {
# Configure subplots
par(mfrow = c(n, m),mar = c(10, 4, 4, 1))
# Loop through columns
for (col in colnames(data_train)) {
# plot numeric columns
if (is.numeric(data_train[[col]]) && (type == "numeric" || type == "both")) {
# Create histograms
hist(data_train[[col]],
main = paste(col),
xlab = "",
col = "dodgerblue4")
# plot non-numeric columns
} else if (!is.numeric(data_train[[col]]) && (type == "categoric"
|| type == "both")) {
# Adjust x-axis label arrangement for specific cols
barplot(table(data_train[[col]]),
main = paste(col),
xlab = "",
col = "dodgerblue")
}
}
# Reset the plotting layout
par(mfrow = c(1, 1))
}
# Numeric hist
plot_hist(data = data_train ,type="numeric", n=3, m=2)
# Numeric hist
plot_hist(data = data_train ,type="categoric", n=3, m=2)
ggpairs(data_train)
numeric_columns <- df[, sapply(df, is.numeric)]
numeric_columns <- data_train[, sapply(data_train, is.numeric)]
ggpairs(iris, cardinality_threshold = 150)
numeric_columns <- data_train[, sapply(data_train, is.numeric)]
ggpairs(data_train, cardinality_threshold = 150)
numeric_columns <- data_train[, sapply(data_train, is.numeric)]
ggpairs(data_train, cardinality_threshold = 1000)
#ggpairs(data_train, cardinality_threshold = 1000)
numeric_columns
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
ggpairs(data_train[, numeric_column_names])
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
ggpairs(data_train[, numeric_column_names])
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
ggpairs(data_train[, numeric_column_names],
aes(color = data_train$group_var))
# Install and load reshape2 package
install.packages("reshape2")
library(reshape2)
library(ggplot2)
corr_mat <- round(cor(data_train),2)
knitr::opts_chunk$set(echo = TRUE)
# Install and load reshape2 package
install.packages("reshape2")
library(reshape2)
library(ggplot2)
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
corr_mat <- round(cor(data_train[, numeric_column_names]),2)
melted_corr_mat <- melt(corr_mat)
head(melted_corr_mat)
ggplot(data_train[, numeric_column_names] = melted_corr_mat, aes(x=Var1, y=Var2,
# Install and load reshape2 package
install.packages("reshape2")
library(reshape2)
library(ggplot2)
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
corr_mat <- round(cor(data_train[, numeric_column_names]),2)
melted_corr_mat <- melt(corr_mat)
head(melted_corr_mat)
ggplot(data_train = melted_corr_mat, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value),
color = "black", size = 4)
knitr::opts_chunk$set(echo = TRUE)
# Install and load reshape2 package
library(reshape2)
library(ggplot2)
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
corr_mat <- round(cor(data_train[, numeric_column_names]),2)
melted_corr_mat <- melt(corr_mat)
head(melted_corr_mat)
ggplot(data_train = melted_corr_mat, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value),
color = "black", size = 4)
# Install and load reshape2 package
library(reshape2)
library(ggplot2)
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
corr_mat <- round(cor(data_train[, numeric_column_names]),2)
melted_corr_mat <- melt(corr_mat)
head(melted_corr_mat)
ggplot(data_train = melted_corr_mat, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value),
color = "black", size = 4)
# Install and load necessary packages
library(reshape2)
library(ggplot2)
library(GGally) # This is required for ggpairs
# Compute correlation matrix
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
corr_mat <- round(cor(data_train[, numeric_column_names]), 2)
melted_corr_mat <- melt(corr_mat)
# Plot correlation heatmap
ggplot(data = melted_corr_mat, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "black", size = 4)
# Pairplot using ggpairs
ggpairs(data_train[, numeric_column_names],
aes(color = data_train$group_var))
# Install and load necessary packages
library(reshape2)
library(ggplot2)
library(GGally) # This is required for ggpairs
# Compute correlation matrix
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
corr_mat <- round(cor(data_train[, numeric_column_names]), 2)
melted_corr_mat <- melt(corr_mat)
# Plot correlation heatmap
ggplot(data = melted_corr_mat, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "black", size = 4)+
scale_fill_gradient(low = "blue", high = "red") +
theme_minimal()
# Pairplot using ggpairs
#ggpairs(data_train[, numeric_column_names],
#        aes(color = data_train$group_var))
# Install and load necessary packages
library(reshape2)
library(ggplot2)
library(GGally) # This is required for ggpairs
# Compute correlation matrix
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
corr_mat <- round(cor(data_train[, numeric_column_names]), 2)
melted_corr_mat <- melt(corr_mat)
# Plot correlation heatmap
ggplot(data = melted_corr_mat, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "black", size = 4)+
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Pairplot using ggpairs
#ggpairs(data_train[, numeric_column_names],
#        aes(color = data_train$group_var))
plot_hist = function(data_train, type = "both", n, m) {
# Configure subplots
par(mfrow = c(n, m),mar = c(10, 4, 4, 1))
# Loop through columns
for (col in colnames(data_train)) {
# plot numeric columns
if (is.numeric(data_train[[col]]) && (type == "numeric" || type == "both")) {
# Create histograms
hist(data_train[[col]],
main = paste(col),
xlab = "",
col = "dodgerblue4")
# plot non-numeric columns
} else if (!is.numeric(data_train[[col]]) && (type == "categoric"
|| type == "both")) {
# Adjust x-axis label arrangement for specific cols
barplot(table(data_train[[col]]),
main = paste(col),
xlab = "",
col = "dodgerblue",
las = 2)
}
}
# Reset the plotting layout
par(mfrow = c(1, 1))
}
# Numeric hist
plot_hist(data = data_train ,type="categoric", n=3, m=2)
average_price_per_barrio <- df %>%
group_by(barrio) %>%
summarise(average_price = mean(`precio.house.m2`, na.rm = TRUE))
#install.packages(c("ggplot2", "sf", "dplyr"))
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
library(GGally)
library(dplyr)
average_price_per_barrio <- df %>%
group_by(barrio) %>%
summarise(average_price = mean(`precio.house.m2`, na.rm = TRUE))
average_price_per_barrio <- data_train %>%
group_by(barrio) %>%
summarise(average_price = mean(`precio.house.m2`, na.rm = TRUE))
average_price_per_barrio <- data_train %>%
group_by(barrio) %>%
summarise(average_price = mean(`precio.house.m2`, na.rm = TRUE))
average_price_per_barrio
average_price_per_barrio <- data_train %>%
group_by(barrio) %>%
summarise(average_price = mean(`precio.house.m2`, na.rm = TRUE))
ggplot(average_price_per_barrio, aes(x = reorder(barrio, average_price), y = average_price)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flip coordinates for better readability if there are many barrios
labs(title = "Average Price per 2m by Barrio",
x = "Barrio",
y = "Average Price per 2m") +
theme_minimal()
average_price_per_district <- data_train %>%
group_by(distrito) %>%
summarise(average_price = mean(`precio.house.m2`, na.rm = TRUE))
ggplot(average_price_per_district, aes(x = reorder(barrio, average_price), y = average_price)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flip coordinates for better readability if there are many barrios
labs(title = "Average Price per 2m by Barrio",
x = "Barrio",
y = "Average Price per 2m") +
theme_minimal()
average_price_per_district <- data_train %>%
group_by(distrito) %>%
summarise(average_price = mean(`precio.house.m2`, na.rm = TRUE))
ggplot(average_price_per_district, aes(x = reorder(distrito, average_price), y = average_price)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flip coordinates for better readability if there are many barrios
labs(title = "Average Price per 2m by District",
x = "District",
y = "Average Price per 2m") +
theme_minimal()
madrid_map
points_sf <- st_as_sf(data_train, coords = c("longitud", "latitud"), crs = 4326)
points_sf <- points_sf[order(points_sf$precio.house.m2), ]
# Download the map of Madrid (use a simple shapefile, for example)
madrid_map <- st_read("Data/madrid.geojson")
# Plot the map with the points colored by the 'value' variable
ggplot() +
geom_sf(data = madrid_map, fill = "lightgray", color = "white") +  # Plot map
geom_sf(data = points_sf, aes(color = precio.house.m2), size = 1.5) +  # Plot points
scale_color_gradient(low = "#00C5CD", high = "red") +
labs(title = "Spatial situation and price",
x = "Longitude", y = "Latitude") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
### Done with teh help of ChatGPT
madrid_map
madrid_map.info()
class(madrid_map)
madrid_map.head()
madrid_map
df <- df %>%
mutate(column_name = case_when(
column_name == "a" ~ "b",
column_name == "c" ~ "d",
TRUE ~ column_name  # keeps other values unchanged
))
"df <- df %>%
mutate(column_name = case_when(
column_name == "a" ~ "b",
unique(madrid_map$name)
"df <- df %>%
mutate(column_name = case_when(
column_name == "a" ~ "b",
unique(madrid_map$name)
unique(data_train$distrito)
"df <- df %>%
mutate(column_name = case_when(
column_name == "a" ~ "b",
unique(madrid_map$name)
print("\n")
unique(data_train$distrito)
"df <- df %>%
mutate(column_name = case_when(
column_name == "a" ~ "b",
unique(madrid_map$name)
print("\n")
unique(data_train$barrio)
"df <- df %>%
mutate(column_name = case_when(
column_name == "a" ~ "b",
unique(madrid_map$name)
print("\n")
unique(data_train$distrito)
"df <- df %>%
mutate(column_name = case_when(
column_name == "a" ~ "b",
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
data_train <- read_excel("Data/data_train.xlsx")
#install.packages(c("ggplot2", "sf", "dplyr"))
# Load libraries
library(ggplot2)
library(sf)
library(dplyr)
library(GGally)
library(dplyr)
colnames(data_train)
# turn identifiers into strings to prevent errors
data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona ", "casco.historico", "M.30","comercial")] <- lapply(data_train[, c("train_indices", "cod_barrio", "cod_distrito", "ref.hip.zona", "casco.historico", "M.30","comercial")], as.character)
unique_counts <- data.frame(
Column = names(data_train),
Unique_Values = sapply(data_train, function(x) length(unique(x)))
)
unique_counts
plot_hist = function(data_train, type = "both", n, m) {
# Configure subplots
par(mfrow = c(n, m),mar = c(10, 4, 4, 1))
# Loop through columns
for (col in colnames(data_train)) {
# plot numeric columns
if (is.numeric(data_train[[col]]) && (type == "numeric" || type == "both")) {
# Create histograms
hist(data_train[[col]],
main = paste(col),
xlab = "",
col = "dodgerblue4")
# plot non-numeric columns
} else if (!is.numeric(data_train[[col]]) && (type == "categoric"
|| type == "both")) {
# Adjust x-axis label arrangement for specific cols
barplot(table(data_train[[col]]),
main = paste(col),
xlab = "",
col = "dodgerblue",
las = 2)
}
}
# Reset the plotting layout
par(mfrow = c(1, 1))
}
# Numeric hist
plot_hist(data = data_train ,type="numeric", n=3, m=2)
# Numeric hist
plot_hist(data = data_train ,type="categoric", n=3, m=2)
# Install and load necessary packages
library(reshape2)
library(ggplot2)
library(GGally) # This is required for ggpairs
# Compute correlation matrix
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
corr_mat <- round(cor(data_train[, numeric_column_names]), 2)
melted_corr_mat <- melt(corr_mat)
# Plot correlation heatmap
ggplot(data = melted_corr_mat, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "black", size = 4)+
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Pairplot using ggpairs
#ggpairs(data_train[, numeric_column_names],
#        aes(color = data_train$group_var))
average_price_per_barrio <- data_train %>%
group_by(barrio) %>%
summarise(average_price = mean(`precio.house.m2`, na.rm = TRUE))
ggplot(average_price_per_barrio, aes(x = reorder(barrio, average_price), y = average_price)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flip coordinates for better readability if there are many barrios
labs(title = "Average Price per 2m by Barrio",
x = "Barrio",
y = "Average Price per 2m") +
theme_minimal()
average_price_per_district <- data_train %>%
group_by(distrito) %>%
summarise(average_price = mean(`precio.house.m2`, na.rm = TRUE))
ggplot(average_price_per_district, aes(x = reorder(distrito, average_price), y = average_price)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flip coordinates for better readability if there are many barrios
labs(title = "Average Price per 2m by District",
x = "District",
y = "Average Price per 2m") +
theme_minimal()
points_sf <- st_as_sf(data_train, coords = c("longitud", "latitud"), crs = 4326)
points_sf <- points_sf[order(points_sf$precio.house.m2), ]
# Download the map of Madrid (use a simple shapefile, for example)
madrid_map <- st_read("Data/madrid.geojson")
# Plot the map with the points colored by the 'value' variable
ggplot() +
geom_sf(data = madrid_map, fill = "lightgray", color = "white") +  # Plot map
geom_sf(data = points_sf, aes(color = precio.house.m2), size = 1.5) +  # Plot points
scale_color_gradient(low = "#00C5CD", high = "red") +
labs(title = "Spatial situation and price",
x = "Longitude", y = "Latitude") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
### Done with teh help of ChatGPT
summary(data_train)
summary(data_train)
# Install and load necessary packages
library(reshape2)
library(ggplot2)
library(GGally) # This is required for ggpairs
# Compute correlation matrix
numeric_column_names <- names(data_train)[sapply(data_train, is.numeric)]
corr_mat <- round(cor(data_train[, numeric_column_names]), 2)
melted_corr_mat <- melt(corr_mat)
# Plot correlation heatmap
ggplot(data = melted_corr_mat, aes(x = Var2, y = Var1, fill = value)) +
geom_tile() +
geom_text(aes(label = value), color = "black", size = 4)+
scale_fill_gradient(low = "white", high = "red") +
theme_minimal()
# Pairplot using ggpairs
ggpairs(data_train[, numeric_column_names])
