rnorm(20, mean = 3800, sd = 180)),
number_of_rooms = rep(c("1", "2", "3"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)-1) {
print(i)
# Subset data for the two categories
category_i <- categories[i]
category_iplus <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_iplus), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_iplus, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_iplus, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value < 0.05) {
new_level <- paste0(category_i, "+", category_iplus)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_iplus)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_iplus))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
i = 0
}
}
data <- read_excel("Data/data_train.xlsx")
#t_test_result <- t.test(values ~ group, data = data, var.equal = TRUE)  # Use var.equal = TRUE for equal variance
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3400, sd = 250),
rnorm(20, mean = 3800, sd = 180)),
number_of_rooms = rep(c("1", "2", "3"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)-1) {
print(i)
# Subset data for the two categories
category_i <- categories[i]
category_iplus <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_iplus), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_iplus, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_iplus, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value < 0.05) {
new_level <- paste0(category_i, "+", category_iplus)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_iplus)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_iplus))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
i = 1
}
}
# Check the updated dataframe
head(df)
print(levels(df$number_of_rooms))
data <- read_excel("Data/data_train.xlsx")
#t_test_result <- t.test(values ~ group, data = data, var.equal = TRUE)  # Use var.equal = TRUE for equal variance
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3400, sd = 250),
rnorm(20, mean = 3800, sd = 180)),
number_of_rooms = rep(c("1", "2", "3"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)) {
j = 1
while (i <= length(categories)) {
print(i)
print(j)
# Subset data for the two categories
category_i <- categories[i]
category_j <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_j), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_j, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_j, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value < 0.05) {
new_level <- paste0(category_i, "+", category_j)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_j)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_j))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
# reset
i = 1
}else {
i = i+1
}
}
}
data <- read_excel("Data/data_train.xlsx")
#t_test_result <- t.test(values ~ group, data = data, var.equal = TRUE)  # Use var.equal = TRUE for equal variance
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3400, sd = 250),
rnorm(20, mean = 3800, sd = 180)),
number_of_rooms = rep(c("1", "2", "3"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)) {
j = i+1
while (i <= length(categories)) {
print(i)
print(j)
# Subset data for the two categories
category_i <- categories[i]
category_j <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_j), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_j, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_j, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value < 0.05) {
new_level <- paste0(category_i, "+", category_j)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_j)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_j))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
# reset
i = 1
}else {
i = i+1
}
}
}
data <- read_excel("Data/data_train.xlsx")
#t_test_result <- t.test(values ~ group, data = data, var.equal = TRUE)  # Use var.equal = TRUE for equal variance
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3400, sd = 250),
rnorm(20, mean = 3800, sd = 180)),
number_of_rooms = rep(c("1", "2", "3"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)) {
j = i+1
while (i <= length(categories)-1) {
print(i)
print(j)
# Subset data for the two categories
category_i <- categories[i]
category_j <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_j), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_j, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_j, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value < 0.05) {
new_level <- paste0(category_i, "+", category_j)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_j)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_j))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
# reset
i = 1
}else {
i = i+1
}
}
}
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3400, sd = 250),
rnorm(20, mean = 3800, sd = 180)),
number_of_rooms = rep(c("1", "2", "3"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)) {
j = i+1
while (i <= length(categories)-1) {
print(i)
print(j)
# Subset data for the two categories
category_i <- categories[i]
category_j <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_j), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_j, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_j, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value > 0.05) {
new_level <- paste0(category_i, "+", category_j)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_j)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_j))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
# reset
i = 1
}else {
i = i+1
}
}
}
#data <- read_excel("Data/data_train.xlsx")
#t_test_result <- t.test(values ~ group, data = data, var.equal = TRUE)  # Use var.equal = TRUE for equal variance
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3400, sd = 200),
rnorm(20, mean = 3400, sd = 250),
rnorm(20, mean = 3800, sd = 180)),
number_of_rooms = rep(c("1", "2", "3"), each = 20)
)
#data <- read_excel("Data/data_train.xlsx")
#t_test_result <- t.test(values ~ group, data = data, var.equal = TRUE)  # Use var.equal = TRUE for equal variance
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3400, sd = 200),
rnorm(20, mean = 3400, sd = 250),
rnorm(20, mean = 3800, sd = 180)),
number_of_rooms = rep(c("1", "2", "3","4","5"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)) {
j = i+1
while (i <= length(categories)-1) {
print(i)
print(j)
# Subset data for the two categories
category_i <- categories[i]
category_j <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_j), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_j, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_j, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value > 0.05) {
new_level <- paste0(category_i, "+", category_j)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_j)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_j))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
# reset
i = 1
}else {
i = i+1
}
}
}
cat(levels(df$number_of_rooms))
#data <- read_excel("Data/data_train.xlsx")
#t_test_result <- t.test(values ~ group, data = data, var.equal = TRUE)  # Use var.equal = TRUE for equal variance
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3100, sd = 200),
rnorm(20, mean = 3200, sd = 200),
rnorm(20, mean = 3300, sd = 250),
rnorm(20, mean = 3400, sd = 180)),
number_of_rooms = rep(c("1", "2", "3","4","5"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)) {
j = i+1
while (i <= length(categories)-1) {
print(i)
print(j)
# Subset data for the two categories
category_i <- categories[i]
category_j <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_j), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_j, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_j, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value > 0.05) {
new_level <- paste0(category_i, "+", category_j)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_j)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_j))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
# reset
i = 1
}else {
i = i+1
}
}
}
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3100, sd = 200),
rnorm(20, mean = 3200, sd = 200),
rnorm(20, mean = 3300, sd = 250),
rnorm(20, mean = 3400, sd = 180)),
number_of_rooms = rep(c("1", "2", "3","4","5"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)) {
j = i+1
while (i <= length(categories)-1) {
print(i)
print(j)
# Subset data for the two categories
category_i <- categories[i]
category_j <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_j), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_j, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_j, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value > 0.05) {
new_level <- paste0(category_i, "+", category_j)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_j)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_j))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
print("new_level")
print(new_level)
# reset
i = 1
}else {
i = i+1
}
}
}
library(readxl)
# Example dataset
set.seed(123)
df <- data.frame(
price_per_sqm = c(rnorm(20, mean = 3000, sd = 200),
rnorm(20, mean = 3100, sd = 200),
rnorm(20, mean = 3200, sd = 200),
rnorm(20, mean = 3300, sd = 250),
rnorm(20, mean = 3400, sd = 180)),
number_of_rooms = rep(c("1", "2", "3","4","5"), each = 20)
)
# Ensure `number_of_rooms` is a factor
df$number_of_rooms <- as.factor(df$number_of_rooms)
# Get all unique categories (levels) of 'number_of_rooms'
categories <- levels(df$number_of_rooms)
# Initialize a list to store t-test results
t_test_results <- list()
# Loop over each pair of categories
i = 1
while (i <= length(categories)) {
j = i+1
while (i <= length(categories)-1) {
print(i)
print(j)
# Subset data for the two categories
category_i <- categories[i]
category_j <- categories[i + 1]
# Perform t-test between the two categories
t_test <- t.test(price_per_sqm ~ number_of_rooms,
data = df[df$number_of_rooms %in% c(category_i, category_j), ])
# Store the result with the category names
t_test_results[[paste(category_i, category_j, sep = "_vs_")]] <- t_test
# Print t-test result
print(paste(category_i, category_j, "p-value:", t_test$p.value))
# If p-value is less than 0.05, merge the two categories
if (t_test$p.value > 0.05) {
new_level <- paste0(category_i, "+", category_j)  # Create new merged level name
levels(df$number_of_rooms) <- c(levels(df$number_of_rooms), new_level)  # Add the new level
# Merge the two categories
df$number_of_rooms[df$number_of_rooms %in% c(category_i, category_j)] <- new_level
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_i))
df$number_of_rooms <- factor(df$number_of_rooms, levels = setdiff(levels(df$number_of_rooms), category_j))
# Update the category list after merging
categories <- levels(df$number_of_rooms)
print("new_level")
print(new_level)
# reset
i = 1
j = i+1
}else {
i = i+1
}
}
}
