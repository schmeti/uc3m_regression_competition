TRUE ~ as.character(distrito)
)
)
data$distrito <- factor(data$distrito, levels = unique(data$distrito))
# Function to normalize multiple variables
normalize_variables <- function(variables) {
for (var in variables) {
data[[var]] <- (data[[var]] - mean(data[[var]], na.rm = TRUE)) / sd(data[[var]], na.rm = TRUE)
}
return(data)
}
# Generate the formula automatically
num_id <- sapply(data, is.numeric)
num_vars <- names(data)[num_id] %>% setdiff(c("y", "radius"))
data = normalize_variables(num_vars)
# Eliminar columnas no deseadas
data <- subset(data, select=predictors)
return(data)
}
# Preprocess the data
data_train <- preprocess(data)
### K-fold CV ------------------------------------------------------------------
k_fold <- function(data, k, cat_vars = c("tipo.casa"), obj_var = "y") {
# Create a k-fold partition with balanced cat_vars and which
# tries to minimize similar values in obj_var
folded_data <- fold(data,
k = k,
cat_col = cat_vars,
num_col = obj_var)
# It adds a new variable, .folds, which assigns a value 1 to k to each
# instance, dividing them by folds
# Return the new dataset
return(folded_data)
}
#### WARNING --- IN PROGRESS
### Loop to find a comprehensively balanced seed for the k-fold
seed <- 1
mix <- 1000000
k = 4
Tot_table <- list()
n <- 736
num_id <- sapply(data_train, is.numeric)
num_vars <- setdiff(names(data_train)[num_id], "y")
cat_vars <- names(data_train)[!num_id]
for (var in cat_vars){
Tot_table[[as.name(var)]] = table(data_train[[as.name(var)]])/n
}
for (i in 1:2000){
set.seed(i)
folded_data <- fold(data_train,
k = k,
cat_col = "tipo.casa",
num_col = "y")
mix_aux <- 0
for (j in 1:k){
temp_indexes <- which(folded_data$.folds == j)
ll <- length(temp_indexes)
for(var in cat_vars){
mix_aux= mix_aux + sum(abs(table(data_train[[as.name(var)]][which(folded_data$.folds == j)])/ll - Tot_table[[as.name(var)]]))
}
}
print(i)
print(mix_aux)
if (mix_aux < mix){
seed <- i
mix <- mix_aux
}
}
k_fold <- function(data, k=4, cat_vars = c("tipo.casa"), obj_var = "y") {
# Set the previously studied best seed (balance-wise)
set.seed(248)
# Create a k-fold partition with balanced cat_vars and which
# tries to minimize similar values in obj_var
folded_data <- fold(data,
k = k,
cat_col = cat_vars,
num_col = obj_var)
# It adds a new variable, .folds, which assigns a value 1 to k to each
# instance, dividing them by folds
# Return the new dataset
return(folded_data)
}
seed = 248
folded_data <- fold(data_train,
k = k,
cat_col = "tipo.casa",
num_col = "y")
folded_data
k_fold <- function(data, k=4, cat_vars = c("tipo.casa"), obj_var = "y") {
# Set the previously studied best seed (balance-wise)
set.seed(248)
# Create a k-fold partition with balanced cat_vars and which
# tries to minimize similar values in obj_var
folded_data <- fold(data,
k = k,
cat_col = cat_vars,
num_col = obj_var)
# It adds a new variable, .folds, which assigns a value 1 to k to each
# instance, dividing them by folds
# Return the new dataset
return(folded_data)
}
folded_data <- k_fold(data_train)
for (j in 1:k){
print(paste(j, "- Fold   ==================================================="))
for(var in cat_vars){
print(paste(var,"----------------------------------------------------------"))
print(table(data_train[[as.name(var)]][which(folded_data$.folds == j)])/ll)
print(Tot_table[[as.name(var)]])
}
}
fit_linear_model = function(formula, data_train){
model = lm(formula,data = data_train)
return(model)
}
k_fold_cv_linear_model <- function(model_formula,
data_train,
k=4){
cat("=== Running k_fold Cross Validation --- lm === \n")
# Create the K-fold partition
folded_data <- k_fold(data_train,k)$.folds
# Initialize a vector to store each fold's rsme
cv_rmse <- numeric(k)
# Initialize a vector to store each fold's Rsq_adj
cv_rsq_adj <- numeric(k)
for (i in 1:k){
# Create the fold's test/train split
temp_train <- data_train[which(folded_data!=i),]
temp_test <- data_train[which(folded_data==i),]
# Fit the model and make predictions
temp_model <- fit_linear_model(model_formula, temp_train)
temp_predictions <- predict(temp_model, newdata = temp_test)
## Calculate error metrics and store them
# RsqAdj in log(y)
n_test = nrow(temp_test)
num_predictors = length(coefficients(temp_model))
SSE = sum((temp_test$y - temp_predictions)^2)
SST = sum((mean(temp_test$y) - temp_test$y)^2)
cv_rsq_adj[i] = 1 - (SSE/(n_test-num_predictors))/(SST/(n_test-1))
# RMSE in the original variable
SSE_exp = sum((exp(temp_test$y) - exp(temp_predictions))^2)
cv_rmse[i] <- sqrt(SSE_exp/n_test)
}
# Return the vector with rmse for each k-fold
return(list(cv_rmse=cv_rmse,
mean_cv_rmse = mean(cv_rmse),
cv_rsq_adj=cv_rsq_adj,
mean_cv_rsq_adj = mean(cv_rsq_adj)
))
}
#### Modelling: No interactions ------------------------------------------------
## Base
num_id <- sapply(data_train, is.numeric)
num_vars <- setdiff(names(data_train)[num_id], "y")
num_vars
cat_vars <- names(data_train)[!num_id]
cat_vars
lm_formula <- as.formula(
paste("y ~", paste(c(num_vars, cat_vars), collapse = " + "))
)
lm_model = lm(lm_formula,data = data_train)
summary(lm_model)
k_fold_cv_linear_model(lm_formula, data_train)
lm_BIC_formula <- as.formula(
paste("y ~", paste(BIC_predictors, collapse = " + "))
)
lm_BIC <- stepAIC(lm_model, direction = 'both', k = log(n))
summary(lm_BIC)
BIC_predictors <- labels(terms(lm_BIC))
lm_BIC_formula <- as.formula(
paste("y ~", paste(BIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(lm_formula, data_train)
lm_AIC <- stepAIC(lm_model, direction = 'both')
summary(lm_AIC)
### Modeling: Interactions -----------------------------------------------------
## Base
total_lm_formula <- as.formula(
paste("y ~", "(", paste(num_vars, collapse = " + "), ")", "*", "(", paste(cat_vars, collapse = " + "), ")" )
)
total_lm_model = lm(total_lm_formula,data = data_train)
summary(total_lm_model)
k_fold_cv_linear_model(total_lm_formula, data_train) # Errores de multicolinearidad
#total_lm_BIC <- stepAIC(total_lm_model, direction = 'both', k = log(n))
load("Modelos Nico 3/total_lm_BIC.RData")
summary(total_lm_BIC)
#save(total_lm_BIC, file = "Modelos Nico 3/total_lm_BIC.RData")
total_BIC_predictors <- labels(terms(total_lm_BIC))
total_BIC_formula <- as.formula(
paste("y ~", paste(total_BIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(total_BIC_formula, data_train)
total_BIC_interactions <- total_BIC_predictors[16:length(total_BIC_predictors)]
# Create plots for each interaction
plots <- lapply(total_BIC_interactions, function(interaction) {
# Split the interaction into individual variables
vars <- unlist(strsplit(interaction, ":"))
ggplot(data_train, aes(x = !!as.name(vars[1]), y = y, color = !!as.name(vars[2]))) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = paste("Interaction:", interaction),
x = vars[1], y = "y") +
theme_minimal()
})
n = 1;
plots[[n]];n=n+1
plots[[n]];n=n+1
plots[[n]];n=n+1
plots[[n]];n=n+1
plots[[n]];n=n+1
plots[[n]];n=n+1
# We disregard PM10:comercial, pob.14:comercial
# because their interactions seem unimportant ---> Fit the model without them
# and check if PM10 and pob.14 are significative
manual_BIC_predictors <- setdiff(labels(terms(total_lm_BIC)), c("PM10:comercial", "Pobl.0_14_div_Poblac.Total:comercial"))
manual_BIC_formula <- as.formula(
paste("y ~", paste(manual_BIC_predictors, collapse = " + "))
)
manual_BIC_model <- lm(manual_BIC_formula, data = data_train)
summary(manual_BIC_model)
# We disregard PoblJubilada_div_Poblac.Total, PM10
manual_BIC_predictors <- setdiff(labels(terms(manual_BIC_model)), c("PoblJubilada_div_Poblac.Total", "PM10"))
manual_BIC_formula <- as.formula(
paste("y ~", paste(manual_BIC_predictors, collapse = " + "))
)
manual_BIC_model <- lm(manual_BIC_formula, data = data_train)
summary(manual_BIC_model)
k_fold_cv_linear_model(manual_BIC_formula, data_train)
# Identify the variables included in teh BIC model without interactions and the manual one
not_included <- setdiff(BIC_predictors, manual_BIC_predictors)
not_included
# Add them (and interactions) to the manual model and perform BIC again
manual_BIC_predictors
num_BIC_predictors <- manual_BIC_predictors[1:8]
cat_BIC_predictors <- manual_BIC_predictors[9:13]
inter_BIC_predictors <- manual_BIC_predictors[14:16]
# Get all the interactions to be added
not_included_num <- not_included[c(1,2)]
not_included_cat <- not_included[3]
combinations1 <- expand.grid(not_included_num, cat_BIC_predictors)
inter_new1 <- paste(combinations1$Var1, combinations1$Var2, sep = ":")
combinations2 <- expand.grid(num_BIC_predictors, not_included_cat)
inter_new2 <- paste(combinations2$Var1, combinations2$Var2, sep = ":")
added_terms <- c(not_included, inter_new1, inter_new2)
added_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors, added_terms), collapse = " + "))
)
added_model <- lm (added_formula, data_train)
summary(added_model)
# Perform BIC again
added_BIC_model <- stepAIC(added_model, direction = 'both', k = log(n))
summary(added_BIC_model)
added_BIC_predictors <- labels(terms(added_BIC_model))
added_BIC_predictors
added_formula <- as.formula(
paste("y ~", paste(added_BIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(added_formula, data_train) # Worse
summary(added_BIC_model)
### New vars after BIC
new_vars <- setdiff(labels(terms(added_BIC_model)), labels(terms(manual_BIC_model)))
new_vars
new_manual_BIC_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors, new_vars), collapse = " + "))
)
new_manual_BIC_model <- lm(new_manual_BIC_formula, data = data_train)
summary(new_manual_BIC_model)
k_fold_cv_linear_model(new_manual_BIC_formula, data_train)
added_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors, added_terms), collapse = " + "))
)
added_model <- lm (added_formula, data_train)
summary(added_model)
# Perform BIC again
added_BIC_model <- stepAIC(added_model, direction = 'both', k = log(n))
summary(added_BIC_model)
added_BIC_predictors <- labels(terms(added_BIC_model))
added_BIC_predictors
added_BIC_formula <- as.formula(
paste("y ~", paste(added_BIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(added_BIC_formula, data_train) # Worse
### New vars after BIC
new_vars <- setdiff(labels(terms(added_BIC_model)), labels(terms(manual_BIC_model)))
new_vars
new_manual_BIC_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors, new_vars), collapse = " + "))
)
new_manual_BIC_model <- lm(new_manual_BIC_formula, data = data_train)
summary(new_manual_BIC_model)
k_fold_cv_linear_model(new_manual_BIC_formula, data_train)
save(manual_BIC_model, file = "Modelos Nico 3/manual_BIC_model.RData")
k_fold_cv_linear_model(manual_BIC_formula, data_train)
k_fold_cv_linear_model(manual_BIC_formula, data_train)
BIC_predictors <- labels(terms(lm_BIC))
# Identify the variables included in the BIC model without interactions and the manual one
not_included <- setdiff(BIC_predictors, manual_BIC_predictors)
not_included
# Add them (and interactions) to the manual model and perform BIC again
manual_BIC_predictors
num_BIC_predictors <- manual_BIC_predictors[1:8]
cat_BIC_predictors <- manual_BIC_predictors[9:13]
inter_BIC_predictors <- manual_BIC_predictors[14:16]
# Get all the interactions to be added
not_included_num <- not_included[c(1,2)]
not_included_cat <- not_included[3]
combinations1 <- expand.grid(not_included_num, cat_BIC_predictors)
inter_new1 <- paste(combinations1$Var1, combinations1$Var2, sep = ":")
combinations2 <- expand.grid(num_BIC_predictors, not_included_cat)
inter_new2 <- paste(combinations2$Var1, combinations2$Var2, sep = ":")
added_terms <- c(not_included, inter_new1, inter_new2)
added_terms
combinations3 <- expand.grid(not_included_num, not_included_cat)
inter_new3 <- paste(combinations3$Var1, combinations3$Var2, sep = ":")
added_terms <- c(not_included, inter_new1, inter_new2, inter_new3)
added_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors, added_terms), collapse = " + "))
)
added_model <- lm (added_formula, data_train)
summary(added_model)
# Perform BIC again
added_BIC_model <- stepAIC(added_model, direction = 'both', k = log(n))
summary(added_BIC_model)
added_BIC_predictors <- labels(terms(added_BIC_model))
added_BIC_predictors
added_BIC_formula <- as.formula(
paste("y ~", paste(added_BIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(added_BIC_formula, data_train) # Worse
### New vars after BIC
new_vars <- setdiff(labels(terms(added_BIC_model)), labels(terms(manual_BIC_model)))
new_vars
summary(added_BIC_model)
added_BIC_predictors
added_BIC_interactions <- added_BIC_predictors[17:25]
added_BIC_interactions
# Create plots for each interaction
plots <- lapply(added_BIC_interactions, function(interaction) {
# Split the interaction into individual variables
vars <- unlist(strsplit(interaction, ":"))
ggplot(data_train, aes(x = !!as.name(vars[1]), y = y, color = !!as.name(vars[2]))) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = paste("Interaction:", interaction),
x = vars[1], y = "y") +
theme_minimal()
})
n = 1
plots[[n]];n = n+1
plots[[n]];n = n+1
plots[[n]];n = n+1
plots[[n]];n = n+1
plots[[n]];n = n+1
plots[[n]];n = n+1
plots[[n]];n = n+1
plots[[n]];n = n+1
plots[[n]];n = n+1
plots[[n]];n = n+1
inter_new1
inter_new2
inter_new3
added_BIC_interactions
added_BIC_predictors <- labels(terms(added_BIC_model))
summary(added_BIC_model)
added_terms
manual_BIC_predictors
added_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors, added_terms), collapse = " + "))
)
added_formula
added_model <- lm (added_formula, data_train)
summary(added_model)
# Perform BIC again
added_BIC_model <- stepAIC(added_model, direction = 'both', k = log(n))
summary(added_BIC_model)
added_model
summary(added_model)
summary(added_model)
added_formula
inter_new1
inter_new2
inter_new3
not_included
manual_BIC_predictors
manual_BIC_predictors[1:13]
manual_BIC_predictors[-1:13]
manual_BIC_predictors[-c(1:13)]
added_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors[1:13], added_terms[1:3], manual_BIC_predictors[-c(1:13)], added_terms[-c(1:3)]), collapse = " + "))
)
added_formula
added_model <- lm (added_formula, data_train)
summary(added_model)
# Perform BIC again
added_BIC_model <- stepAIC(added_model, direction = 'both', k = log(n))
summary(added_BIC_model)
added_BIC_predictors <- labels(terms(added_BIC_model))
added_BIC_predictors
## Step BIC
n <- 736
added_terms <- c(not_included, inter_new1, inter_new2, inter_new3)
added_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors[1:13], added_terms[1:3], manual_BIC_predictors[-c(1:13)], added_terms[-c(1:3)]), collapse = " + "))
)
added_model <- lm (added_formula, data_train)
summary(added_model)
# Perform BIC again
added_BIC_model <- stepAIC(added_model, direction = 'both', k = log(n))
summary(added_BIC_model)
added_BIC_predictors <- labels(terms(added_BIC_model))
added_BIC_predictors
added_BIC_formula <- as.formula(
paste("y ~", paste(added_BIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(added_BIC_formula, data_train) # Worse
### New vars after BIC
new_vars <- setdiff(labels(terms(added_BIC_model)), labels(terms(manual_BIC_model)))
new_vars
new_manual_BIC_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors, new_vars), collapse = " + "))
)
new_manual_BIC_model <- lm(new_manual_BIC_formula, data = data_train)
summary(new_manual_BIC_model)
k_fold_cv_linear_model(new_manual_BIC_formula, data_train)
save(new_manual_BIC_model, file = "Modelos Nico 3/new_manual_BIC_model.RData")
added_AIC_model <- stepAIC(added_model, direction = 'both')
summary(added_AIC_model)
added_AIC_predictors <- labels(terms(added_AIC_model))
added_AIC_predictors
added_BIC_formula <- as.formula(
paste("y ~", paste(added_AIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(added_AIC_formula, data_train) # Worse
added_AIC_formula <- as.formula(
paste("y ~", paste(added_AIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(added_AIC_formula, data_train) # Worse
added_BIC_model <- stepAIC(added_model, direction = 'both', k = log(n))
summary(added_BIC_model)
added_BIC_predictors <- labels(terms(added_BIC_model))
added_BIC_predictors
added_BIC_formula <- as.formula(
paste("y ~", paste(added_BIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(added_BIC_formula, data_train) # Worse
### New vars after BIC
new_vars <- setdiff(labels(terms(added_BIC_model)), labels(terms(manual_BIC_model)))
new_vars
new_manual_BIC_formula <- as.formula(
paste("y ~", paste(c(manual_BIC_predictors, new_vars), collapse = " + "))
)
new_manual_BIC_model <- lm(new_manual_BIC_formula, data = data_train)
summary(new_manual_BIC_model)
k_fold_cv_linear_model(new_manual_BIC_formula, data_train)
#save(new_manual_BIC_model, file = "Modelos Nico 3/new_manual_BIC_model.RData")
par(mfrow = c(2, 2)) # Arrange plots in a 2x2 grid
plot(new_manual_BIC_model)
# Diagnostics
par(mfrow = c(2, 2)) # Arrange plots in a 2x2 grid
plot(manual_BIC_model)
# Diagnostics
par(mfrow = c(2, 2)) # Arrange plots in a 2x2 grid
plot(manual_BIC_model)
# Diagnostics
par(mfrow = c(2, 2)) # Arrange plots in a 2x2 grid
plot(total_lm_BIC)
total_lm_BIC$anova
total_lm_BIC$aic
total_BIC_predictors
manual_BIC_predictors %in% total_BIC_predictors
new_manual_BIC_predictors <- c(manual_BIC_predictors, new_vars)
manual_BIC_predictors %in% new_manual_BIC_predictors
new_manual_BIC_predictors %in% total_BIC_predictors
anova(manual_BIC_model, total_lm_BIC)
anova(total_lm_BIC, manual_BIC_model)
BIC(total_lm_BIC, manual_BIC_model, new_manual_BIC_model)
summary(manual_BIC_model)
manual_BIC_predictors
## New try : Eliminate from manual_model O3 and intercation --------------------
manual2_predictors <- setdiff(manual_BIC_predictors, c("O3", "O3:ascensor"))
manual2_predictors
## New try : Eliminate from manual_model O3 and intercation --------------------
manual2_predictors <- setdiff(manual_BIC_predictors, c("O3", "O3:ascensor"))
manual2_formula <- as.formula(
paste("y ~", paste(manual2_predictors, collapse = " + "))
)
manual2_model <- lm(manual2_formula, data = data_train)
summary(manual2_model)
k_fold_cv_linear_model(manual2_formula, data_train)
# Diagnostics
par(mfrow = c(2, 2)) # Arrange plots in a 2x2 grid
plot(new_manual_BIC_model)
summary(manual_BIC_model)
k_fold_cv_linear_model(manual_BIC_formula, data_train)
### New idea: StepAIC + Manual selection ---------------------------------------
total_lm_AIC <- stepAIC(total_lm_model, direction = 'both')
summary(total_lm_AIC)
save(total_lm_AIC, file = "Modelos Nico 3/total_lm_AIC.RData")
# save(total_lm_AIC, file = "Modelos Nico 3/total_lm_AIC.RData")
load("Modelos Nico 3/total_lm_BIC.RData")
summary(total_lm_AIC)
total_AIC_predictors <- labels(terms(total_lm_AIC))
total_AIC_formula <- as.formula(
paste("y ~", paste(total_AIC_predictors, collapse = " + "))
)
k_fold_cv_linear_model(total_AIC_formula, data_train)
anova(total_lm_AIC)
data_train[c(305, 437, 645),]
print(data_train[c(305, 437, 645),])
log(736)
View(data_train)
hist(data_train$y)
