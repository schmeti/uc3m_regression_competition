predictors){
# Eliminate
data$train_indices <- NULL
# Eliminate
data$barrio <- NULL
# Eliminate
data$cod_barrio <- NULL
# Eliminate
data$cod_distrito <- NULL
# Logarithmic objective variable
data$y <- log(data$precio.house.m2)
data$precio.house.m2 <- NULL # Eliminate the old variable
# Eliminate sup.const for collinearity reasons
data$sup.const <- NULL
# Logarithmic transform
data$log.sup.util <- log(data$sup.util)
data$sup.util <- NULL
# Eliminate casco.historico for duplcate information reasons
data$casco.historico <- NULL
# Eliminate M.30 for duplcate information reasons
data$M.30 <- NULL
# radius
# Load required library
library(geosphere)
# Central point (Puerta del Sol)
center <- c(-3.7038, 40.4168)
# Calculate distances and add a new column
data$radius <- distHaversine(
matrix(c(data$longitud, data$latitud), ncol = 2),
matrix(rep(center, nrow(data)), ncol = 2, byrow = TRUE)
) / 1000  # Convert meters to kilometers
# Turn categorical columns to factors
factor_columns <- c("distrito", "banos", "dorm", "tipo.casa", "inter.exter",
"ascensor", "estado", "comercial")
data[factor_columns] <- lapply(data[factor_columns], as.factor)
# group categories via manual evaluation
# Dorm
data <- data %>%
mutate(
dorm = case_when(
dorm %in% c("0", "1") ~ "0-1",
dorm %in% c("4", "5", "6", "7") ~ "+4",
TRUE ~ as.character(dorm)
)
)
data$dorm <- factor(data$dorm, levels = unique(data$dorm))
# Banos
data <- data %>%
mutate(
banos = case_when(
banos %in% c("3", "4", "5", "7") ~ "+3",
TRUE ~ as.character(banos)
)
)
data$banos <- factor(data$banos, levels = unique(data$banos))
# tipo.casa
data <- data %>%
mutate(
tipo.casa = case_when(
tipo.casa %in% c("atico", "estudio") ~ "Atico/Estudio",
tipo.casa %in% c("piso", "Otros") ~ "Piso",
tipo.casa %in% c("chalet", "duplex") ~ "Chalet/Duplex",
TRUE ~ as.character(tipo.casa)
)
)
data$tipo.casa <- factor(data$tipo.casa, levels = unique(data$tipo.casa))
# estado
data <- data %>%
mutate(
estado = case_when(
estado %in% c("a_reformar", "reg,-mal") ~ "Bajo",
estado %in% c("excelente", "nuevo-semin,", "reformado") ~ "Alto",
estado %in% c("buen_estado", "segunda_mano") ~ "Medio",
)
)
data$estado <- factor(data$estado, levels = unique(data$estado))
data <- data %>%
mutate(
distrito = case_when(
# South Districts
distrito %in% c("arganzuela" ,"centro", "chamartin", "chamberi", "moncloa", "retiro", "salamanca") ~ "Center",
# Central Districts
distrito %in% c("carabanchel", "latina") ~ "South West",
# North Districts
distrito %in% c("moratalaz", "puente_vallecas", "usera", "vallecas", "vicalvaro", "villaverde") ~ "South East",
# West Districts
distrito %in% c("barajas","ciudad_lineal", "fuencarral", "hortaleza", "san_blas","tetuan") ~ "North East",
# Default to original values if no match
TRUE ~ as.character(distrito)
)
)
data$distrito <- factor(data$distrito, levels = unique(data$distrito))
# Unifying the numeric gases variables into a single dichotomic 'polluted'
# which is to be SO2 (PM10 behaves strangely)
pollutants <- c("CO", "NO2", "Nox", "O3", "PM10")
for (var in pollutants){
data[[var]] <- NULL
}
# Function to normalize multiple variables
normalize_variables <- function(variables) {
for (var in variables) {
data[[var]] <- (data[[var]] - mean(data[[var]], na.rm = TRUE)) / sd(data[[var]], na.rm = TRUE)
}
return(data)
}
# Generate the formula automatically
num_id <- sapply(data, is.numeric)
num_vars <- names(data)[num_id] %>% setdiff(c("y", "radius"))
data = normalize_variables(num_vars)
# Eliminar columnas no deseadas
data <- subset(data, select=predictors)
return(data)
}
# Preprocess the data
data_train <- preprocess(data)
added_BIC_model = lm(added_BIC_formula, data_train)
summary(added_BIC_model)
anova(added_BIC_model)
k_fold_cv_linear_model(added_BIC_formula, data_train)
check_multicollinearity(added_BIC_model, data_train)
anova(added_BIC_model)
final_lm_predictors <- setdiff(added_BIC_predictors, "Poca_limp")
final_lm_formula <- as.formula(
paste("y ~", paste(final_lm_predictors, collapse = " + "))
)
final_lm_model = lm(final_lm_formula, data_train)
summary(final_lm_model)
anova(final_lm_model)
k_fold_cv_linear_model(final_lm_formula, data_train)
check_multicollinearity(final_lm_model, data_train)
final_lm_predictors <- setdiff(added_BIC_predictors, "Pocas_zonas  ")
final_lm_formula <- as.formula(
paste("y ~", paste(final_lm_predictors, collapse = " + "))
)
final_lm_model = lm(final_lm_formula, data_train)
summary(final_lm_model)
k_fold_cv_linear_model(final_lm_formula, data_train)
summary(final_lm_model)
final_lm_predictors <- setdiff(added_BIC_predictors, "Pocas_zonas")
final_lm_predictors
final_lm_formula <- as.formula(
paste("y ~", paste(final_lm_predictors, collapse = " + "))
)
final_lm_model = lm(final_lm_formula, data_train)
summary(final_lm_model)
k_fold_cv_linear_model(final_lm_formula, data_train)
###
ss <- stepAIC(added_BIC_model, direction = 'both', k = log(n))
summary(ss)
summary(added_BIC_model)
summary(ss)
###
ss <- stepAIC(added_BIC_model, direction = 'both', k = 2)
summary(ss)
###
ss <- stepAIC(added_BIC_model, direction = 'both', k = 12)
summary(ss)
final_lm_predictors <- setdiff(added_BIC_predictors)
final_lm_predictors <- setdiff(added_BIC_predictors,c())
final_lm_formula <- as.formula(
paste("y ~", paste(final_lm_predictors, collapse = " + "))
)
final_lm_model = lm(final_lm_formula, data_train)
summary(final_lm_model)
anova(final_lm_model)
k_fold_cv_linear_model(final_lm_formula, data_train)
check_multicollinearity(final_lm_model, data_train)
final_lm_predictors <- setdiff(added_BIC_predictors,c("Pocas_zonas"))
final_lm_formula <- as.formula(
paste("y ~", paste(final_lm_predictors, collapse = " + "))
)
final_lm_model = lm(final_lm_formula, data_train)
summary(final_lm_model)
anova(final_lm_model)
k_fold_cv_linear_model(final_lm_formula, data_train)
k_fold_cv_linear_model(added_BIC_formula, data_train)
k_fold_cv_linear_model(lm_AIC_formula, data_train)
AIC_predictors
final_lm_predictors
final_lm_predictors <- added_BIC_predictors
final_lm_formula <- as.formula(
paste("y ~", paste(final_lm_predictors, collapse = " + "))
)
final_lm_model = lm(final_lm_formula, data_train)
summary(final_lm_model)
anova(final_lm_model)
k_fold_cv_linear_model(final_lm_formula, data_train)
check_multicollinearity(final_lm_model, data_train)
# Diagnostics
par(mfrow = c(2, 2))
plot(lm_AIC)
## Directly from AIC
BIC_predictors <- labels(terms(lm_AIC))
## Directly from AIC
AIC_predictors <- labels(terms(lm_AIC))
AIC_predictors
## Directly from AIC
AIC_predictors <- labels(terms(lm_AIC))
num_AIC_predictors <- AIC_predictors[1:9]
num_AIC_predictors
cat_AIC_predictors
cat_AIC_predictors <- AIC_predictors[10:17]
cat_AIC_predictors
cat_AIC_predictors <- AIC_predictors[10:16]
combinations1 <- expand.grid(num_AIC_predictors, cat_AIC_predictors)
inter_new1 <- paste(combinations1$Var1, combinations1$Var2, sep = ":")
# Create plots for each interaction
plots <- lapply(inter_new1, function(interaction) {
# Split the interaction into individual variables
vars <- unlist(strsplit(interaction, ":"))
ggplot(data_train, aes(x = !!as.name(vars[1]), y = y, color = !!as.name(vars[2]))) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = paste("Interaction:", interaction),
x = vars[1], y = "y") +
theme_minimal()
})
m=1
plots[[m]];m=m+1
plots[[m]];m=m+1
plots[[m]];m=m+1
added_AIC_predictors <- c(num_BIC_predictors, cat_BIC_predictors, inter_new1)
added_AIC_formula <- as.formula(
paste("y ~", paste(added_AIC_predictors, collapse = " + "))
)
added_AIC_model = lm(added_AIC_formula, data_train)
summary(added_AIC_model)
anova(added_AIC_model)
k_fold_cv_linear_model(added_AIC_formula, data_train)
check_multicollinearity(added_AIC_model, data_train)
added_AIC_predictors
summary(added_AIC_model)
k_fold_cv_linear_model(added_AIC_formula, data_train)
ss = stepAIC(added_AIC_model, direction = 'both', k = 2)
summary(ss)
k_fold_cv_linear_model(ss, data_train)
ss = stepAIC(added_AIC_model, direction = 'both', k = log(736))
summary(ss)
k_fold_cv_linear_model(ss, data_train)
summary(added_AIC_model)
## Directly from AIC
AIC_predictors <- labels(terms(lm_AIC))
num_AIC_predictors <- AIC_predictors[1:9]
cat_AIC_predictors <- AIC_predictors[10:16]
combinations1 <- expand.grid(num_AIC_predictors, cat_AIC_predictors)
inter_new1 <- paste(combinations1$Var1, combinations1$Var2, sep = ":")
inter_new1
added_AIC_predictors <- c(num_AIC_predictors, cat_AIC_predictors, inter_new1)
added_AIC_formula <- as.formula(
paste("y ~", paste(added_AIC_predictors, collapse = " + "))
)
added_AIC_model = lm(added_AIC_formula, data_train)
summary(added_AIC_model)
anova(added_AIC_model)
k_fold_cv_linear_model(added_AIC_formula, data_train)
check_multicollinearity(added_AIC_model, data_train)
ss = stepAIC(added_AIC_model, direction = 'both', k = log(736))
summary(ss)
k_fold_cv_linear_model(ss, data_train)
## Apply BIC to the new model to make it sparser
sparse_AIC_model = stepAIC(added_AIC_model, direction = 'both', k = log(736))
summary(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
sparse_AIC_predictors <- labels(terms(sparse_AIC_model))
sparse_AIC_predictors
sparse_AIC_interactions <- sparse_AIC_predictors[13:16]
sparse_AIC_interactions <- sparse_AIC_predictors[13:16]
# Create plots for each interaction
plots <- lapply(sparse_AIC_interactions, function(interaction) {
# Split the interaction into individual variables
vars <- unlist(strsplit(interaction, ":"))
ggplot(data_train, aes(x = !!as.name(vars[1]), y = y, color = !!as.name(vars[2]))) +
geom_point(alpha = 0.25) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = paste("Interaction:", interaction),
x = vars[1], y = "y") +
theme_minimal()
})
m=1
plots[[m]];m=m+1
plots[[m]];m=m+1
summary(final_lm_model)
plots[[m]];m=m+1
plots[[m]];m=m+1
plots[[m]];m=m+1
plots[[m]];m=m+1
m=1
plots[[m]];m=m+1
num_BIC_predictors <- c(BIC_predictors[1:5], "log.sup.util") # Added log.sup.util bc we consider it to be important
cat_BIC_predictors <- c(BIC_predictors[6:10], "tipo.casa") # Added tipo.casa bc we consider it to be important
combinations1 <- expand.grid(num_BIC_predictors, cat_BIC_predictors)
inter_new1 <- paste(combinations1$Var1, combinations1$Var2, sep = ":")
inter_new1
## Directly from BIC -----------------------------------------------------------
BIC_predictors <- labels(terms(lm_BIC))
num_BIC_predictors <- c(BIC_predictors[1:5], "log.sup.util") # Added log.sup.util bc we consider it to be important
cat_BIC_predictors <- c(BIC_predictors[6:10], "tipo.casa") # Added tipo.casa bc we consider it to be important
combinations1 <- expand.grid(num_BIC_predictors, cat_BIC_predictors)
inter_new1 <- paste(combinations1$Var1, combinations1$Var2, sep = ":")
inter_new1
inter_selected <- c("log.sup.util:comercial", "log.sup.util:banos")
added_BIC_predictors <- c(num_BIC_predictors, cat_BIC_predictors, inter_selected)
added_BIC_formula <- as.formula(
paste("y ~", paste(added_BIC_predictors, collapse = " + "))
)
added_BIC_model = lm(added_BIC_formula, data_train)
summary(added_BIC_model)
anova(added_BIC_model)
k_fold_cv_linear_model(added_BIC_formula, data_train)
inter_selected <- c("log.sup.util:comercial")
added_BIC_predictors <- c(num_BIC_predictors, cat_BIC_predictors, inter_selected)
added_BIC_formula <- as.formula(
paste("y ~", paste(added_BIC_predictors, collapse = " + "))
)
added_BIC_model = lm(added_BIC_formula, data_train)
k_fold_cv_linear_model(added_BIC_formula, data_train)
m=1
plots[[m]];m=m+1
sparse_AIC_interactions
sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
check_multicollinearity(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c("log.sup.util:banos")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c( "Pobl.0_14_div_Poblac.Total:comercial")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c( "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:comercial")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa",  "log.sup.util:comercial")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c("log.sup.util:banos",  "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
#sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_interactions <- c(  "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial")
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
summary(sparse_AIC_model)
k_fold_cv_linear_model(final_lm_formula, data_train)
k_fold_cv_linear_model(added_AIC_formula, data_train)
## Apply BIC to the new model to make it sparser
sparse_AIC_model = stepAIC(added_AIC_model, direction = 'both', k = log(736))
k_fold_cv_linear_model(sparse_AIC_model, data_train)
sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa", "Pobl.0_14_div_Poblac.Total:comercial", "log.sup.util:comercial" )
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
m=1
plots[[m]];m=m+1
plots[[m]];m=m+1
plots[[m]];m=m+1
plots[[m]];m=m+1
sparse_AIC_interactions <- c("log.sup.util:banos", "Pobl.0_14_div_Poblac.Total:tipo.casa",  "log.sup.util:comercial" )
sparse_AIC_formula <- as.formula(
paste("y ~", paste(c(sparse_AIC_predictors[1:12], sparse_AIC_interactions), collapse = " + "))
)
sparse_AIC_model = lm(sparse_AIC_formula, data_train)
summary(sparse_AIC_model)
anova(sparse_AIC_model)
k_fold_cv_linear_model(sparse_AIC_model, data_train)
# Diagnostics
par(mfrow = c(2, 2))
plot(final_lm1_model)
final_lm1_predictors <- added_BIC_predictors
final_lm1_formula <- as.formula(
paste("y ~", paste(final_lm_predictors, collapse = " + "))
)
final_lm1_model = lm(final_lm_formula, data_train)
summary(final_lm1_model)
anova(final_lm1_model)
k_fold_cv_linear_model(final_lm1_formula, data_train)
check_multicollinearity(final_lm1_model, data_train)
# Diagnostics
par(mfrow = c(2, 2))
plot(final_lm1_model)
final_lm2_predictors <- labels(terms(sparse_AIC_model))
final_lm2_formula <- as.formula(
paste("y ~", paste(final_lm2_predictors, collapse = " + "))
)
final_lm2_model = lm(final_lm2_formula, data_train)
summary(final_lm2_model)
anova(final_lm2_model)
k_fold_cv_linear_model(final_lm2_formula, data_train)
check_multicollinearity(final_lm2_model, data_train)
# Diagnostics
par(mfrow = c(2, 2))
plot(final_lm2_model)
## Apply BIC to the new model to make it sparser
sparse_AIC_model = stepAIC(added_AIC_model, direction = 'both', k = log(736))
k_fold_cv_linear_model(sparse_AIC_model, data_train)
## Model 2 --- Sparse AIC after interacting ------------------------------------
final_lm2_predictors <- labels(terms(sparse_AIC_model))
final_lm2_formula <- as.formula(
paste("y ~", paste(final_lm2_predictors, collapse = " + "))
)
final_lm2_model = lm(final_lm2_formula, data_train)
summary(final_lm2_model)
anova(final_lm2_model)
k_fold_cv_linear_model(final_lm2_formula, data_train)
check_multicollinearity(final_lm2_model, data_train)
# Diagnostics
par(mfrow = c(2, 2))
plot(final_lm2_model)
final_lm1_predictors <- added_BIC_predictors
final_lm1_formula <- as.formula(
paste("y ~", paste(final_lm1_predictors, collapse = " + "))
)
final_lm1_model = lm(final_lm1_formula, data_train)
summary(final_lm1_model)
anova(final_lm1_model)
k_fold_cv_linear_model(final_lm1_formula, data_train)
check_multicollinearity(final_lm1_model, data_train)
# Diagnostics
par(mfrow = c(2, 2))
plot(final_lm1_model)
k_fold_cv_linear_model(final_lm1_formula, data_train)
save(final_lm1_model, file = "Modelos Nico 4/final_lm2_model.RData")
save(final_lm1_model, file = "Modelos Nico 4/final_lm1_model.RData")
